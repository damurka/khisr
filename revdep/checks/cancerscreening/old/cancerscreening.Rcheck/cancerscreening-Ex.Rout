
R version 4.3.2 (2023-10-31 ucrt) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cancerscreening"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('cancerscreening')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cancerscreening-configuration")
> ### * cancerscreening-configuration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cancerscreening-configuration
> ### Title: cancerscreening configuration
> ### Aliases: cancerscreening-configuration with_cancerscreening_quiet
> ###   local_cancerscreening_quiet
> 
> ### ** Examples
> 
> # message: "The credentials have been set."
> khis_cred(username = 'username', password = 'password')
ℹ The credentials have been set.
> 
> # suppress messages for a small amount of code
> with_cancerscreening_quiet(
+   khis_cred(username = 'username', password = 'password')
+ )
ℹ The credentials have been set.
> # message: "The credentials have been set."
> khis_cred(username = 'username', password = 'password')
ℹ The credentials have been set.
> 
> # suppress messages for a in a specific scope
> local_cancerscreening_quiet()
> 
> # no message
> khis_cred(username = 'username', password = 'password')
ℹ The credentials have been set.
> 
> # clear credentials
> khis_cred_clear()
> 
> 
> 
> cleanEx()
> nameEx("get_analytics_formatted")
> ### * get_analytics_formatted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_analytics_formatted
> ### Title: Retrieves Analytics Table Data from KHIS
> ### Aliases: get_analytics_formatted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Clinical Breast Examination data elements
+ # XEX93uLsAm2 = CBE Abnormal
+ # cXe64Yk0QMY = CBE Normal
+ element_id = c('cXe64Yk0QMY', 'XEX93uLsAm2')
+ 
+ # Download data from February 2023 to current date
+ data <- get_analytics(element_ids = element_id,
+                       start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_breast_cbe")
> ### * get_breast_cbe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_breast_cbe
> ### Title: Retrieves Data for Clinical Breast Examinations (CBE) Conducted
> ### Aliases: get_breast_cbe
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Download data from February 2023 to current date
+ cbe_data <- get_breast_cbe(start_date = '2023-02-01')
+ cbe_data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_breast_mammogram")
> ### * get_breast_mammogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_breast_mammogram
> ### Title: Retrieves Data for Mammograms Conducted
> ### Aliases: get_breast_mammogram
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ mammogram_data <- get_breast_mammogram(start_date = '2023-02-01')
+ mammogram_data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_breast_ultrasound")
> ### * get_breast_ultrasound
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_breast_ultrasound
> ### Title: Retrieves Data for Breast Ultrasound Conducted
> ### Aliases: get_breast_ultrasound
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ ultrasound_data <- get_breast_ultrasound(start_date = '2023-02-01')
+ ultrasound_data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_cervical_hiv_screened")
> ### * get_cervical_hiv_screened
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cervical_hiv_screened
> ### Title: Retrieves Cervical Cancer Screening Data on HIV Positive Women
> ### Aliases: get_cervical_hiv_screened
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Download data from February 2023 to current date
+ screened <- get_cervical_hiv_screened(start_date = '2023-02-01')
+ screened
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_cervical_positive")
> ### * get_cervical_positive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cervical_positive
> ### Title: Retrieves Cervical Cancer Screening Data with Positive Results
> ### Aliases: get_cervical_positive
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Download data from February 2023 to current date
+ positive <- get_cervical_positive(start_date = '2023-02-01')
+ positive
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_cervical_screened")
> ### * get_cervical_screened
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cervical_screened
> ### Title: Retrieves Cervical Cancer Screening Data
> ### Aliases: get_cervical_screened
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Download data from February 2023 to current date
+ screened <- get_cervical_screened(start_date = '2023-02-01')
+ screened
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_cervical_treated")
> ### * get_cervical_treated
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cervical_treated
> ### Title: Retrieves Cervical Cancer Precancerous Treatment Data
> ### Aliases: get_cervical_treated
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Download data from February 2023 to current date
+ treated <- get_cervical_treated(start_date = '2023-02-01')
+ treated
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_colorectal_colonoscopy")
> ### * get_colorectal_colonoscopy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_colorectal_colonoscopy
> ### Title: Retrieves Data for Colorectal Screening using Colonoscopy
> ### Aliases: get_colorectal_colonoscopy
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_colorectal_colonoscopy(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_colorectal_fobt")
> ### * get_colorectal_fobt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_colorectal_fobt
> ### Title: Retrieves Data for Colorectal Screening Using FOBT
> ### Aliases: get_colorectal_fobt
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_colorectal_fobt(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_data_elements_metadata")
> ### * get_data_elements_metadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_data_elements_metadata
> ### Title: Get Data Elements Metadata
> ### Aliases: get_data_elements_metadata
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Fetch the data element metadata for particular element id
+ elements <- get_data_elements_metadata('htFuvGJRW1X')
+ elements
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_data_sets_formatted")
> ### * get_data_sets_formatted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_data_sets_formatted
> ### Title: Retrieves Data Set Reporting Rate Metrics
> ### Aliases: get_data_sets_formatted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # The MoH 745 Cancer Screening Program Monthly Summary Form
+ dataset_id = c('WWh5hbCmvND')
+ 
+ # Download data from February 2023 to current date
+ data <- get_data_sets_formatted(element_ids = element_id,
+                                 start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_filtered_population")
> ### * get_filtered_population
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_filtered_population
> ### Title: Filters the Population
> ### Aliases: get_filtered_population
> 
> ### ** Examples
> 
> 
> # Get the female population in 2022 aged 25-49 years
> filtered_population <- get_filtered_population(2022, 25, 49, pop_sex = 'female')
> filtered_population
# A tibble: 1 × 2
  country   target
  <chr>      <dbl>
1 Kenya   7294076.
> 
> # Get 5% male population in 2022 aged 40-75 years
> filtered_population <- get_filtered_population(2022, 40, 75, modifier = 0.05, pop_sex = 'male')
> filtered_population
# A tibble: 1 × 2
  country  target
  <chr>     <dbl>
1 Kenya   221010.
> 
> 
> 
> cleanEx()
> nameEx("get_lab_bone_marrow")
> ### * get_lab_bone_marrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_lab_bone_marrow
> ### Title: Retrieves the Bone Marrow Laboratory Data
> ### Aliases: get_lab_bone_marrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_lab_bone_marrow(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_lab_fluid_cytology")
> ### * get_lab_fluid_cytology
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_lab_fluid_cytology
> ### Title: Retrieves the Fluid Cytology Data
> ### Aliases: get_lab_fluid_cytology
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_lab_fluid_cytology(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_lab_fna")
> ### * get_lab_fna
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_lab_fna
> ### Title: Retrieves the Fine-Needle Aspiration Laboratory Data
> ### Aliases: get_lab_fna
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_lab_fna(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_lab_smears")
> ### * get_lab_smears
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_lab_smears
> ### Title: Retrieves the Cytology Smears Laboratory Data
> ### Aliases: get_lab_smears
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_lab_smears(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_lab_tissue_histology")
> ### * get_lab_tissue_histology
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_lab_tissue_histology
> ### Title: Retrieves the Tissue Histology Laboratory Data
> ### Aliases: get_lab_tissue_histology
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Download data from February 2023 to current date
+ data <- get_lab_tissue_histology(start_date = '2023-02-01')
+ data
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("get_organisation_units_metadata")
> ### * get_organisation_units_metadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_organisation_units_metadata
> ### Title: Get Organisation Units Metadata
> ### Aliases: get_organisation_units_metadata
> 
> ### ** Examples
> 
> ## Don't show: 
> if (khis_has_cred()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Fetch all the organisation units metadata
+ organisations <- get_organisation_units_metadata()
+ organisations
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("target_population")
> ### * target_population
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: target_population
> ### Title: Screening Target Populations
> ### Aliases: target_population get_cervical_target_population
> ###   get_breast_cbe_target_population
> ###   get_breast_mammogram_target_population
> ###   get_colorectal_target_population
> 
> ### ** Examples
> 
> # Get the country projection for cervical cancer screening for the year 2024
> target_population <- get_cervical_target_population(2024)
> target_population
# A tibble: 1 × 2
  country   target
  <chr>      <dbl>
1 Kenya   1112735.
> 
> # Get the projection for cervical cancer screening for 2022 by county
> target_population <- get_cervical_target_population(2022, level = 'county')
> target_population
# A tibble: 47 × 3
# Groups:   country [1]
   country county          target
   <chr>   <fct>            <dbl>
 1 Kenya   Baringo         12705.
 2 Kenya   Bomet           18680.
 3 Kenya   Bungoma         33151.
 4 Kenya   Busia           18221.
 5 Kenya   Elgeyo Marakwet  9093.
 6 Kenya   Embu            15342.
 7 Kenya   Garissa         15238.
 8 Kenya   Homa Bay        23316.
 9 Kenya   Isiolo           5062.
10 Kenya   Kajiado         29055.
# ℹ 37 more rows
> 
> # Get the projection for CBE for 2022 by county
> target_population <- get_breast_cbe_target_population(2022, level = 'county')
> target_population
# A tibble: 47 × 3
# Groups:   country [1]
   country county          target
   <chr>   <fct>            <dbl>
 1 Kenya   Baringo          9206.
 2 Kenya   Bomet           13021.
 3 Kenya   Bungoma         24429.
 4 Kenya   Busia           13914.
 5 Kenya   Elgeyo Marakwet  6599.
 6 Kenya   Embu            11919.
 7 Kenya   Garissa          9730.
 8 Kenya   Homa Bay        17383.
 9 Kenya   Isiolo           3476.
10 Kenya   Kajiado         18656.
# ℹ 37 more rows
> 
> # Get the country projection of women to perform mammogram for the year 2024
> target_population <- get_breast_mammogram_target_population(2024)
> target_population
# A tibble: 1 × 2
  country  target
  <chr>     <dbl>
1 Kenya   697245.
> 
> # Get the country projection colorectal cancer screening for the year 2024
> target_population <- get_colorectal_target_population(2024)
> target_population
# A tibble: 1 × 2
  country   target
  <chr>      <dbl>
1 Kenya   1022777.
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.5 0.12 1.61 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
Ran 1/1 deferred expressions
